from util import *
from currency import *
from profitfinder import *
from dfbuilder import *
import math


class Disenchant:
    LOW = 0
    HIGH = 1
    PROBABILITIES = 2

    deProbs = {
        ItemClass.ARMOR: {
            Rarity.UNCOMMON: [
                [5, 15, 40, 1, 10940, 40, 2, 10940, 10, 1, 10938, 10, 2, 10938],
                [16, 20, 37.5, 2, 10940, 37.5, 3, 10940, 10, 1, 10939, 10, 2, 10939, 5, 1, 10978],
                [21, 25, 25, 4, 10940, 25, 5, 10940, 25, 6, 10940, 7.5, 1, 10998, 7.5, 2, 10998, 10, 1, 10978],
                [26, 30, 37.5, 1, 11083, 37.5, 2, 11083, 10, 1, 11082, 10, 2, 11082, 5, 1, 11084],
                [31, 35, 18.75, 2, 11083, 18.75, 3, 11083, 18.75, 4, 11083, 18.75, 5, 11083, 10, 1, 11134, 10, 2, 11134,
                 5, 1, 11138],
                [36, 40, 37.5, 1, 11137, 37.5, 2, 11137, 10, 1, 11135, 10, 2, 11135, 5, 1, 11139],
                [41, 45, 18.75, 2, 11137, 18.75, 3, 11137, 18.75, 4, 11137, 18.75, 5, 11137, 10, 1, 11174, 10, 2, 11174,
                 5, 1, 11177],
                [46, 50, 37.5, 1, 11176, 37.5, 2, 11176, 10, 1, 11175, 10, 2, 11175, 5, 1, 11178],
                [51, 55, 18.75, 2, 11176, 18.75, 3, 11176, 18.75, 4, 11176, 18.75, 5, 11176, 10, 1, 16202, 10, 2, 16202,
                 5, 1, 14343],
                [56, 60, 37.5, 1, 16204, 37.5, 2, 16204, 10, 1, 16203, 10, 2, 16203, 5, 1, 14344],
                [61, 65, 18.75, 2, 16204, 18.75, 3, 16204, 18.75, 4, 16204, 18.75, 5, 16204, 10, 2, 16203, 10, 3, 16203,
                 5, 1, 14344],
                [66, 80, 25, 1, 22445, 25, 2, 22445, 25, 3, 22445, 7.3333333333333, 1, 22447, 7.3333333333333, 2, 22447,
                 7.3333333333333, 3, 22447, 3, 1, 22448],
                [81, 99, 37.5, 2, 22445, 37.5, 3, 22445, 11, 2, 22447, 11, 3, 22447, 3, 1, 22448],
                [100, 120, 18.75, 2, 22445, 18.75, 3, 22445, 18.75, 4, 22445, 18.75, 5, 22445, 11, 1, 22446, 11, 2,
                 22446, 3, 1, 22449],
                [121, 151, 25, 1, 34054, 25, 2, 34054, 25, 3, 34054, 11, 1, 34056, 11, 2, 34056, 3, 1, 34053],
                [152, 200, 18.75, 4, 34054, 18.75, 5, 34054, 18.75, 6, 34054, 18.75, 7, 34054, 11, 1, 34055, 11, 2,
                 34055, 3, 1, 34052],
                [272, 272, 34, 1, 52555, 41, 2, 52555, 13, 1, 52718, 12, 2, 52718],
                [278, 278, 31, 1, 52555, 20, 2, 52555, 22, 3, 52555, 9, 1, 52718, 11, 2, 52718, 6, 3, 52718],
                [283, 283, 28, 1, 52555, 21, 2, 52555, 24, 3, 52555, 1, 4, 52555, 8, 1, 52718, 9, 2, 52718, 9, 3,
                 52718],
                [285, 285, 28, 1, 52555, 25, 2, 52555, 20, 3, 52555, 0, 4, 52555, 7, 1, 52718, 9, 2, 52718, 10, 3,
                 52718, 0, 6, 52718],
                [289, 289, 25, 1, 52555, 25, 2, 52555, 25, 3, 52555, 0, 4, 52555, 0, 5, 52555, 7, 1, 52718, 9, 2, 52718,
                 8, 3, 52718, 0, 5, 52718],
                [295, 295, 21, 1, 52555, 19, 2, 52555, 22, 3, 52555, 17, 4, 52555, 7, 2, 52718, 8, 3, 52718, 6, 4,
                 52718],
                [300, 300, 18, 1, 52555, 20, 2, 52555, 19, 3, 52555, 19, 4, 52555, 0, 6, 52555, 8, 2, 52718, 10, 3,
                 52718, 7, 4, 52718],
                [305, 305, 15, 1, 52555, 12, 2, 52555, 26, 3, 52555, 20, 4, 52555, 9, 2, 52718, 10, 3, 52718, 9, 4,
                 52718],
                [306, 306, 24, 2, 52555, 26, 3, 52555, 26, 4, 52555, 12, 1, 52719, 12, 2, 52719],
                [312, 312, 29, 2, 52555, 30, 3, 52555, 20, 4, 52555, 11, 1, 52719, 11, 2, 52719],
                [316, 316, 18, 2, 52555, 18, 3, 52555, 22, 4, 52555, 16, 5, 52555, 14, 2, 52719, 12, 3, 52719],
                [318, 318, 14, 2, 52555, 21, 3, 52555, 22, 4, 52555, 18, 5, 52555, 12, 2, 52719, 13, 3, 52719],
                [325, 325, 17, 3, 52555, 17, 4, 52555, 17, 5, 52555, 50, 2, 52719],
                [333, 333, 12, 2, 52555, 24, 3, 52555, 12, 4, 52555, 29, 5, 52555, 18, 2, 52719, 6, 3, 52719],
                [364, 380, 85, 2, 74249, 15, 1, 74250],
                [381, 390, 85, 2.5, 74249, 15, 1, 74250],
                [391, 410, 85, 3, 74249, 15, 1.5, 74250],
                [411, 483, 85, 3.5, 74249, 15, 2, 74250],
                [484, 625, 100, 2.5, 109693],
                [626, 900, 100, 2.5, 124440]
            ],
            Rarity.RARE: [
                [11, 25, 100, 1, 10978],
                [26, 30, 100, 1, 11084],
                [31, 35, 100, 1, 11138],
                [36, 40, 100, 1, 11139],
                [41, 45, 100, 1, 11177],
                [46, 50, 100, 1, 11178],
                [51, 55, 100, 1, 14343],
                [56, 65, 99.5, 1, 14344, 0.5, 1, 20725],
                [66, 99, 99.5, 1, 22448, 0.5, 1, 20725],
                [100, 120, 99.5, 1, 22449, 0.5, 1, 22450],
                [121, 164, 99.5, 1, 34053, 0.5, 1, 34057],
                [165, 280, 99.5, 1, 34052, 0.5, 1, 34057],
                [288, 288, 100, 1, 52720],
                [292, 292, 100, 1, 52720],
                [300, 300, 95, 1, 52720, 5, 2, 52720],
                [308, 308, 100, 1, 52720],
                [316, 316, 100, 1, 52720],
                [318, 318, 100, 1, 52721],
                [325, 325, 100, 1, 52721],
                [333, 333, 97, 1, 52721, 3, 2, 52721],
                [339, 339, 98, 1, 52721, 2, 2, 52721],
                [346, 346, 99, 1, 52721, 1, 2, 52721],
                [352, 380, 100, 1, 52721],
                [381, 424, 100, 1, 74252],
                [425, 449, 100, 1, 74247],
                [450, 450, 20, 1, 74247, 80, 1, 74252],
                [451, 476, 100, 1, 74247],
                [477, 685, 90, 9, 109693, 10, 1, 111245],
                [686, 850, 30, 3, 124440, 70, 1, 124441]
            ],
            Rarity.EPIC: [
                [40, 45, 33.333333333333, 2, 11177, 33.333333333333, 3, 11177, 33.333333333333, 4, 11177],
                [46, 50, 33.333333333333, 2, 11178, 33.333333333333, 3, 11178, 33.333333333333, 4, 11178],
                [51, 55, 33.333333333333, 2, 14343, 33.333333333333, 3, 14343, 33.333333333333, 4, 14343],
                [56, 60, 100, 1, 20725],
                [61, 80, 50, 1, 20725, 50, 2, 20725],
                [95, 100, 50, 1, 22450, 50, 2, 22450],
                [105, 164, 33.3, 1, 22450, 66.6, 2, 22450],
                [165, 280, 100, 1, 34057],
                [281, 450, 100, 1, 52722],
                [420, 600, 100, 1, 74248],
                [601, 834, 100, 1, 113588],
                [835, 950, 100, 1, 124442]
            ]
        },
        ItemClass.WEAPON: {
            Rarity.UNCOMMON: [
                [6, 15, 10, 1, 10940, 10, 2, 10940, 40, 1, 10938, 40, 2, 10938],
                [16, 20, 10, 2, 10940, 10, 3, 10940, 37.5, 1, 10939, 37.5, 2, 10939, 5, 1, 10978],
                [21, 25, 5, 4, 10940, 5, 5, 10940, 5, 6, 10940, 37.5, 1, 10998, 37.5, 2, 10998, 10, 1, 10978],
                [26, 30, 10, 1, 11083, 10, 2, 11083, 37.5, 1, 11082, 37.5, 2, 11082, 5, 1, 11084],
                [31, 35, 5, 2, 11083, 5, 3, 11083, 5, 4, 11083, 5, 5, 11083, 37.5, 1, 11134, 37.5, 2, 11134, 5, 1,
                 11138],
                [36, 40, 10, 1, 11137, 10, 2, 11137, 37.5, 1, 11135, 37.5, 2, 11135, 5, 1, 11139],
                [41, 45, 5, 2, 11137, 5, 3, 11137, 5, 4, 11137, 5, 5, 11137, 37.5, 1, 11174, 37.5, 2, 11174, 5, 1,
                 11177],
                [46, 50, 10, 1, 11176, 10, 2, 11176, 37.5, 1, 11175, 37.5, 2, 11175, 5, 1, 11178],
                [51, 55, 5.5, 2, 11176, 5.5, 3, 11176, 5.5, 4, 11176, 5.5, 5, 11176, 37.5, 1, 16202, 37.5, 2, 16202, 5,
                 1, 14343],
                [56, 60, 11, 1, 16204, 11, 2, 16204, 37.5, 1, 16203, 37.5, 2, 16203, 5, 1, 14344],
                [61, 65, 5.5, 2, 16204, 5.5, 3, 16204, 5.5, 4, 16204, 5.5, 5, 16204, 37.5, 2, 16203, 37.5, 3, 16203, 5,
                 1, 14344],
                [66, 99, 11, 2, 22445, 11, 3, 22445, 37.5, 2, 22447, 37.5, 3, 22447, 3, 1, 22448],
                [100, 120, 5.5, 2, 22445, 5.5, 3, 22445, 5.5, 4, 22445, 5.5, 5, 22445, 37.5, 1, 22446, 37.5, 2, 22446,
                 3, 1, 22449],
                [121, 151, 7.3333333333333, 1, 34054, 7.3333333333333, 2, 34054, 7.3333333333333, 3, 34054, 37.5, 1,
                 34056, 37.5, 2, 34056, 3, 1, 34053],
                [152, 200, 5.5, 4, 34054, 5.5, 5, 34054, 5.5, 6, 34054, 5.5, 7, 34054, 37.5, 1, 34055, 37.5, 2, 34055,
                 3, 1, 34052],
                [272, 272, 12, 1, 52555, 11, 2, 52555, 33, 1, 52718, 45, 2, 52718],
                [278, 278, 16, 1, 52555, 8, 2, 52555, 4, 3, 52555, 16, 1, 52718, 28, 2, 52718, 28, 3, 52718],
                [283, 283, 7, 1, 52555, 5, 2, 52555, 17, 3, 52555, 22, 1, 52718, 22, 2, 52718, 25, 3, 52718],
                [289, 289, 8, 1, 52555, 8, 2, 52555, 25, 1, 52718, 33, 2, 52718, 27, 3, 52718],
                [295, 295, 2, 1, 52555, 16, 2, 52555, 5, 3, 52555, 3, 4, 52555, 17, 2, 52718, 30, 3, 52718, 28, 4,
                 52718],
                [300, 300, 4, 1, 52555, 10, 2, 52555, 10, 3, 52555, 8, 4, 52555, 25, 2, 52718, 16, 3, 52718, 27, 4,
                 52718],
                [305, 305, 25, 2, 52555, 25, 3, 52555, 37, 3, 52718, 12, 4, 52718],
                [306, 306, 11, 2, 52555, 8, 3, 52555, 11, 4, 52555, 36, 1, 52719, 35, 2, 52719],
                [312, 312, 11, 2, 52555, 7, 3, 52555, 8, 4, 52555, 42, 1, 52719, 31, 2, 52719],
                [317, 317, 6, 2, 52555, 7, 3, 52555, 7, 4, 52555, 6, 5, 52555, 37, 2, 52719, 36, 3, 52719, 1, 5, 52719],
                [318, 318, 21, 3, 52555, 5, 5, 52555, 42, 2, 52719, 32, 3, 52719],
                [351, 380, 85, 2.5, 74249, 15, 1, 74250],
                [381, 390, 85, 3, 74249, 15, 1, 74250],
                [391, 410, 85, 3.5, 74249, 15, 1.5, 74250],
                [411, 483, 85, 4, 74249, 15, 2, 74250],
                [484, 700, 100, 2.5, 109693]
            ],
            Rarity.RARE: [
                [11, 25, 100, 1, 10978],
                [26, 30, 100, 1, 11084],
                [31, 35, 100, 1, 11138],
                [36, 40, 100, 1, 11139],
                [41, 45, 100, 1, 11177],
                [46, 50, 100, 1, 11178],
                [51, 55, 100, 1, 14343],
                [56, 65, 99.5, 1, 14344, 0.5, 1, 20725],
                [66, 99, 99.5, 1, 22448, 0.5, 1, 20725],
                [100, 120, 99.5, 1, 22449, 0.5, 1, 22450],
                [121, 164, 99.5, 1, 34053, 0.5, 1, 34057],
                [165, 280, 99.5, 1, 34052, 0.5, 1, 34057],
                [308, 308, 100, 1, 52720],
                [316, 316, 100, 1, 52720],
                [318, 318, 100, 1, 52721],
                [333, 333, 100, 1, 52721],
                [346, 346, 93, 1, 52721, 7, 2, 52721],
                [381, 424, 100, 1, 74252],
                [425, 449, 100, 1, 74247],
                [450, 450, 20, 1, 74247, 80, 1, 74252],
                [451, 476, 100, 1, 74247],
                [477, 800, 90, 9, 109693, 10, 1, 111245]
            ],
            Rarity.EPIC: [
                [40, 45, 33.333333333333, 2, 11177, 33.333333333333, 3, 11177, 33.333333333333, 4, 11177],
                [46, 50, 33.333333333333, 2, 11178, 33.333333333333, 3, 11178, 33.333333333333, 4, 11178],
                [51, 55, 33.333333333333, 2, 14343, 33.333333333333, 3, 14343, 33.333333333333, 4, 14343],
                [56, 60, 100, 1, 20725],
                [61, 80, 33.3, 1, 20725, 66.6, 2, 20725],
                [95, 100, 50, 1, 22450, 50, 2, 22450],
                [105, 164, 33.3, 1, 22450, 66.6, 2, 22450],
                [165, 280, 100, 1, 34057],
                [281, 450, 100, 1, 52722],
                [420, 600, 100, 1, 74248],
                [601, 800, 100, 1, 113588]
            ]
        }
    }

    skillReqs = {
        Rarity.UNCOMMON: {
            1: 20,
            25: 25,
            50: 30,
            75: 35,
            100: 40,
            125: 45,
            150: 50,
            175: 55,
            200: 60,
            225: 99,
            275: 120,
            325: 150,
            350: 182,
            425: 318,
            475: 437,
        },
        Rarity.RARE: {
            25: 25,
            50: 30,
            75: 35,
            100: 40,
            125: 45,
            150: 50,
            175: 55,
            200: 60,
            225: 97,
            275: 115,
            325: 200,
            450: 346,
            525: 424,
            550: 463,
        },
        Rarity.EPIC: {
            225: 95,
            300: 164,
            375: 277,
            475: 416,
            575: 575,
        }
    }

    @classmethod
    def skillReq(cls, itemRarity, itemLevel):
        for skill, max_ilvl in cls.skillReqs[itemRarity].items():
            if itemLevel <= max_ilvl:
                return skill

    @classmethod
    def skillReqFor(cls, item):
        return cls.skillReq(item.itemRarity, item.itemLevel)

    @classmethod
    def itemLevelMatches(cls, entry, itemLevel):
        return itemLevel >= entry[cls.LOW] and itemLevel <= entry[cls.HIGH]

    @classmethod
    def findEntry(cls, classID, itemRarity, itemLevel):
        entries = cls.deProbs[classID][itemRarity]
        for entry in entries:
            if cls.itemLevelMatches(entry, itemLevel):
                return entry

    @staticmethod
    def isDisenchantable(classID):
        return classID in {ItemClass.WEAPON, ItemClass.ARMOR}

    @staticmethod
    def isNotCommon(itemRarity):
        return itemRarity in {Rarity.UNCOMMON, Rarity.RARE, Rarity.EPIC}

    @classmethod
    def registerAuction(cls, auction):
        # auction["strange dust"] = 790
        cls.auction = auction

    @classmethod
    def registerIDtoName(cls, id_to_name):
        # id_to_name[10490] = "strange dust"
        cls.id_to_name = id_to_name

    @classmethod
    def registerGear(cls, gear):
        cls.gear = gear

    @classmethod
    def calcPrice(cls, classID, itemRarity, itemLevel):
        if not cls.isDisenchantable(classID) or not cls.isNotCommon(itemRarity):
            raise ValueError("Only not common Armor and Weapons can be enchanted")

        if not cls.auction or not cls.id_to_name:
            raise ArgumentError("Auction and id_to_name must be initialized")

        dePrice = 0
        ta = cls.findEntry(classID, itemRarity, itemLevel)
        if not ta:
            return

        for i in range(2, len(ta), 3):
            prob = ta[i]
            stack = ta[i + 1]
            itemID = ta[i + 2]
            price = cls.auction[cls.id_to_name[itemID]]

            dePrice += prob * stack * price

        return math.floor(dePrice / 100)

    @classmethod
    def calcItemPrice(cls, item):
        return cls.calcPrice(item.classID, item.itemRarity, item.itemLevel)

    @classmethod
    def showChancesFor(cls, item):
        ta = cls.findEntry(item.classID, item.itemRarity, item.itemLevel)
        for i in range(2, len(ta), 3):
            prob = ta[i]
            stack = ta[i + 1]
            itemID = ta[i + 2]
            itemName = cls.id_to_name[itemID]
            price = cls.auction[itemName]
            print(Util.stylized_name(itemName), f"({stack})", f"{prob}%", f"({Currency(price)})")

    @classmethod
    def best_deals(cls, sort="%"):
        dfbuilder = DFBuilder()

        for name, cost in cls.auction.items():
            armor = cls.gear.from_name(name)
            if armor:
                try:
                    revenue = cls.calcItemPrice(armor)
                    dfbuilder.add("Name", f"{Util.stylized_name(name)} ({cls.skillReqFor(armor)})")
                    dfbuilder.add("Cost", Currency(cost))
                    dfbuilder.add("Revenue", Currency(revenue))
                    dfbuilder.add("Profit", Currency(revenue - cost))
                    dfbuilder.add("%", round((revenue - cost) * 100 / revenue, 1))
                except ValueError:
                    pass

        return dfbuilder.to_df().sort_values(by=sort, ascending=False)

